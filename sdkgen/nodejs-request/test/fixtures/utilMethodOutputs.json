{
  "SANITIZE" : "test\\'string\\\\n\\\\",
  "GENERATE_FUNCTION_SNIPPEPT": "/**\nThe HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using &quot;Query String \nParameters&quot;. For example, in the following request,\n\n&gt; http://example.com/hi/there?hand=wave\n\nThe parameter &quot;hand&quot; has the value &quot;wave&quot;.\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested.\n@param {String} variables.url\n@param {String} variables.var1\n@param {String} variables.var4\n@param {String} variables.var2\n@param {String} variables.var5\n@param {Function} callback - Callback function to return response (err, res)\n*/\nthis.GET_REQUEST = function(variables, callback){\nif (typeof variables === 'function') {\ncallback = variables;\nvariables = {};\n}\nvar url = variables.url ? variables.url : self.variables.url;\nvar var1 = variables.var1 ? variables.var1 : self.variables.var1;\nvar var4 = variables.var4 ? variables.var4 : self.variables.var4;\nvar var2 = variables.var2 ? variables.var2 : self.variables.var2;\nvar var5 = variables.var5 ? variables.var5 : self.variables.var5;\nvar options = {\n  'method': 'GET',\n  'url': '' + url + '/get?foo1=' + var1 + '' + var4 + '&foo2=' + var2 + '' + var5 + '',\n  'headers': {\n  }\n};\nrequest(options, function (error, response) {\n    callback(error, response);\n});\n}",
  "ITEM_HANDLER": {
    "COLLECTION_AS_PARENT": "/**\nThe HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using &quot;Query String \nParameters&quot;. For example, in the following request,\n\n&gt; http://example.com/hi/there?hand=wave\n\nThe parameter &quot;hand&quot; has the value &quot;wave&quot;.\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested.\n@param {String} variables.url\n@param {String} variables.var1\n@param {String} variables.var4\n@param {String} variables.var2\n@param {String} variables.var5\n@param {Function} callback - Callback function to return response (err, res)\n*/\nthis.GET_REQUEST = function(variables, callback){\nif (typeof variables === 'function') {\ncallback = variables;\nvariables = {};\n}\nvar url = variables.url ? variables.url : self.variables.url;\nvar var1 = variables.var1 ? variables.var1 : self.variables.var1;\nvar var4 = variables.var4 ? variables.var4 : self.variables.var4;\nvar var2 = variables.var2 ? variables.var2 : self.variables.var2;\nvar var5 = variables.var5 ? variables.var5 : self.variables.var5;\nvar options = {\n  'method': 'GET',\n  'url': '' + url + '/get?foo1=' + var1 + '' + var4 + '&foo2=' + var2 + '' + var5 + '',\n  'headers': {\n  }\n};\nrequest(options, function (error, response) {\n    callback(error, response);\n});\n};\n\n",
    "ITEMGROUP_AS_PARENT": "/**\nThe HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using &quot;Query String \nParameters&quot;, as well as the Request Body. For example, in the following request,\n\n&gt; POST /hi/there?hand=wave\n&gt;\n&gt; &lt;request-body&gt;\n\nThe parameter &quot;hand&quot; has the value &quot;wave&quot;. The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter.\n@param {String} variables.url\n@param {String} variables.var4\n@param {String} variables.var5\n@param {Function} callback - Callback function to return response (err, res)\n*/\n\"POST_FORM_DATA\": function(variables, callback){\nif (typeof variables === 'function') {\ncallback = variables;\nvariables = {};\n}\nvar url = variables.url ? variables.url : self.variables.url;\nvar var4 = variables.var4 ? variables.var4 : self.variables.var4;\nvar var5 = variables.var5 ? variables.var5 : self.variables.var5;\nvar options = {\n  'method': 'POST',\n  'url': '' + url + '/post',\n  'headers': {\n  },\n  form: {\n    'foo1': '' + var4 + '',\n    'foo2': '' + var5 + ''\n  }\n};\nrequest(options, function (error, response) {\n    callback(error, response);\n});\n}\n"
  },
  "GET_VARIABLE_FUNCTIONS": "/**\nFunction to set variables for entire SDK. These variables will override existing/default values.\n\n@param {Object} Object containing env variables\n*/\nSDK.prototype.setVariables = function (vars) {\nlet variables = JSON.parse(JSON.stringify(this.variables || configVariables));\nObject.keys(vars).forEach(function (key) {\nvariables[key] = vars[key];\n});\nthis.variables = variables;\nreturn this.variables;\n};\n\n/**\nMethod to retrieve current variable.\n\n@param {string} [var] - Variable name\n@returns {Object} object containing variables\n*/\nSDK.prototype.getVariables = function (variable) {\nreturn variable ? this.variables[variable] : this.variables;\n};\n\nmodule.exports = SDK;\n"
}
