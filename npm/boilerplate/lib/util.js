const codegen = require('postman-code-generators'),

/**
 * Generates snippet for a function declaration

 * @param {String} requestSnippet - Request snippet generated by postman-code-generator
 * @param {Object} options - postman-code-gen options (for specific language)
 * @returns {String} - returns a snippet of function declaration of of a request
 */
function generateFunctionSnippet (requestSnippet, options) {
    var snippet = '';
    // generate function snippet/declaration here
    return snippet;
}

/**
 * Extracts requests and generats snipepts collection members
 * Algorithm used : Reccursive dfs function which uses promises to traverse the postman-collection

 * @param {Object} collectionItem - PostmanItem or PostmanItemGroup instance
 * @param {Object} options - postman-code-gen options (for specific language)
 * @returns {Promise} - promise containing snippet for collection requests or error
 */
async function processCollection(collectionItem, options) {
    var snippet = '',
        error;
    if (sdk.Item.isItem(collectionItem)) {
        codegen.convert('NodeJs', 'Request', collectionItem.request, options, function (err, requestSnippet) {
            if (err) {
                error = err;
                return;
            }
            /**
             *  Access PostmanItem here. Single request fetched during DFS (this element does not have anymore child)
             */
        });
        return new Promise((resolve, reject) => {
            if (error) {
                reject(error);
            } else {
                resolve(snippet);
            }
        });
    }
    /**
     * Access PostmanItemGroup here. PostmanItemgroup, a list of items. This element has one or more child(PostmanItem/PostmanItemGroups).
     * Checkout other sdkgen to refer how it is used.
     */
    const collectionItemPromises = collectionItem.items.members.map((member) => {
        return processCollection(member, options)
            .then((itemSnippet) => {
                snippet += itemSnippet;
            })
            .catch((err) => {
                error = err;
            });
    });
    await Promise.all(collectionItemPromises);
    snippet += '},\n';
    return new Promise((resolve, reject) => {
        if (error) {
            reject(error);
        } else {
            resolve(snippet);
        }
    });
}

module.exports = {
    generateFunctionSnippet,
    processCollection
};
